// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`makeMarkdownByFilename integration should support appended schemas 1`] = `
Object {
  "extendedFromBase": "# Extends from Base

## base

> \`boolean\` | optional

## extended

> \`boolean\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should default name to filename 1`] = `
Object {
  "test": "# test

## foo

> \`number\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should exclude key when isDocumented meta tag is false 1`] = `
Object {
  "test": "# Test

## included

> \`string\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should mark required fields 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | required
",
}
`;

exports[`makeMarkdownByFilename unit should not show blacklist when list length >= maxValueListLength 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should not show whitelist when list length >= maxValueListLength 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support "any" types 1`] = `
Object {
  "test": "# Test

## foo

> \`*\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support blacklisting invalid values 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | optional


blacklist: \`invalid1\`, \`invalid2\`
",
}
`;

exports[`makeMarkdownByFilename unit should support default meta tags 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | optional | defaults to \`1\`
",
}
`;

exports[`makeMarkdownByFilename unit should support descriptions 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | optional


This is a description.
",
}
`;

exports[`makeMarkdownByFilename unit should support length 1`] = `
Object {
  "test": "# Test

## foo

> \`array\` | optional | length: \`1\`
",
}
`;

exports[`makeMarkdownByFilename unit should support list of single primitive type 1`] = `
Object {
  "test": "# Test

## stringList

> \`array\`: \`string\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support list of various primitive types 1`] = `
Object {
  "test": "# Test

## stringList

> \`array\`: \`string\`, \`number\`, \`boolean\`, \`date\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support min and max 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | optional | min: \`0\` | max: \`5\`
",
}
`;

exports[`makeMarkdownByFilename unit should support nested list of single schema/object type 1`] = `
Object {
  "listItem": "[Test](./test.md)
# List Item

## listItemKey

> \`string\` | optional
",
  "test": "# Test

## stringList

> \`array\`: [List Item](./listItem.md) | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support nested schemas/objects 1`] = `
Object {
  "child": "[Parent](./parent.md)
# Child

## foo

> \`number\` | optional
",
  "parent": "# Parent

## [foo](./child.md)

> \`object\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support nested schemas/objects with no name meta tag 1`] = `
Object {
  "child": "[parent](./parent.md)
# child

## foo

> \`number\` | optional
",
  "parent": "# parent

## [foo](./child.md)

> \`object\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support primitive type 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | optional

## bar

> \`string\` | optional

## baz

> \`boolean\` | optional

## faz

> \`date\` | optional
",
}
`;

exports[`makeMarkdownByFilename unit should support whitelisting valid values 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | optional


whitelist: \`valid1\`, \`valid2\`
",
}
`;

exports[`makeMarkdownByFilename unit should use "then" branch when "alternatives" type 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | optional
",
}
`;
